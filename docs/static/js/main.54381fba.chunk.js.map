{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loanding","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAiB5C,OACI,sBAAMC,SAXY,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAMf,SACE,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRhBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAIFI,MAAMF,GAJJ,cAIbG,EAJa,gBAKAA,EAAKC,OALL,uBAKZC,EALY,EAKZA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACxB,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAXnB,kBAcXM,GAdW,4CAAH,sDCEL,SAASO,EAAT,GAAqC,EAAfJ,GAAgB,IAAbC,EAAY,EAAZA,MAAMV,EAAM,EAANA,IAC1C,OACI,sBAAKc,UAAU,6CAAf,UACQ,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,OCDb,IAAMO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDxB,SAAsBA,GAAW,IAAD,EACjBd,mBAAS,CAC/BqB,KAAK,GACLa,UAAS,IAH8B,mBACpCC,EADoC,KAC7BC,EAD6B,KAc3C,OATAC,qBAAU,WACPxB,EAAQC,GAAUwB,MAAK,SAAAC,GACrBH,EAAS,CACNf,KAAKkB,EACLL,UAAS,SAGd,CAACpB,IAEGqB,EDRqBK,CAAa1B,GAA/Ba,EALyB,EAK9BN,KAAYa,EALkB,EAKlBA,SAIjB,OACC,eAAC,WAAD,WACK,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAY,mBAAGJ,UAAU,mCAAb,sBAGf,qBAAKA,UAAU,YAAf,SAGWH,EAAOJ,KAAI,SAACC,GACV,OAAQ,cAACK,EAAD,eAA8BL,GAAZA,EAAIC,aEGpCgB,EAtBI,WAAK,IAAD,EAEgBzC,mBAAS,CAAC,SAF1B,mBAEb0C,EAFa,KAED3C,EAFC,KAGrB,OAEE,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAKG2C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCb1B6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.54381fba.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setcategories}) => {\r\n     const [inputValue, setinputValue] = useState('');\r\n\r\n     const handleInputChange=(e)=>{\r\n      setinputValue(e.target.value);\r\n\r\n     };\r\n     const handleSubmit = (e)=>{\r\n       e.preventDefault();\r\n       if(inputValue.trim().length > 2){\r\n\r\n         setcategories(cate=>[inputValue,...cate]);\r\n         setinputValue('');\r\n       }\r\n       \r\n     };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <input \r\n          type=\"text\" \r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n  setcategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=wX1QFKmezskShDCCgB4VhbW47WJYCvxh`;\r\n    \r\n\r\n    const resp=await fetch(url);\r\n    const {data}=await resp.json();\r\n\r\n    const gifs=data.map(img => {\r\n       return {\r\n         id:img.id,\r\n         title:img.title,\r\n         url:img.images?.downsized_medium.url\r\n       }\r\n    });\r\n     return gifs;\r\n\r\n  };","import React from 'react'\r\n\r\nexport default function GifGridItem({id,title,url}) {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft\">\r\n                <img src={url} alt={title}/>\r\n                <p>{title}</p>\r\n         \r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment} from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n//   const [images, setimages] = useState([])\r\n\r\n\r\n  const {data:images,loanding}= useFetchGifs(category);\r\n \r\n    \r\n\r\n    return (\r\n     <Fragment>\r\n          <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n          {loanding && <p className=\"animate__animated animate__flash\">Cargando</p>}\r\n        {\r\n           \r\n        <div className=\"card-grid\">\r\n          \r\n               {\r\n                   images.map((img) => {\r\n                     return  <GifGridItem key={img.id} {...img}/>\r\n                   })\r\n               }\r\n          \r\n           \r\n        </div> \r\n        }\r\n\r\n     </Fragment>\r\n           \r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport default function useFetchGifs(category) {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loanding:true\r\n    })\r\n    useEffect(() => {\r\n       getGifs(category).then(imgs=>{\r\n         setstate({\r\n            data:imgs,\r\n            loanding:false\r\n         })\r\n       });\r\n    }, [category])\r\n   \r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\n\r\nconst GifExpertApp=()=>{\r\n\r\n   const [categories, setcategories] = useState(['Goku']);\r\n  return (\r\n\r\n    <>\r\n       <h2>GifExpertApp</h2>\r\n       <AddCategory setcategories={setcategories} />\r\n       <hr></hr>\r\n    \r\n   \r\n     \r\n        {\r\n          categories.map(category => (\r\n            <GifGrid key={category} category={category} />\r\n         ))\r\n        }\r\n     \r\n    </>\r\n  );\r\n \r\n};\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n \n    <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}